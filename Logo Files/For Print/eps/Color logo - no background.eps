%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2372 616
%%HiResBoundingBox: 0 0 2371.9199 615.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2371.9199 615.12 re
W
q
[0.24 0 0 -0.24 0 615.12] cm
q
0 0 9883.333 2559.9146 re
W*
q
[19.386856 0 0 19.382753 59.693657 -17855.52] cm
q
60.782799 964.36212 m
87.963699 965.24554 l
60.782799 991.24133 l
60.782799 964.36212 l
h
58.8083 965.81342 m
58.8083 992.5979 l
33.540199 992.5979 l
42.156799 983.8645 50.4198 974.7876 58.8083 965.81342 c
h
86.513596 969.44141 m
89.999992 970.64032 l
77.412292 978.11713 l
86.513596 969.44141 l
h
18.330093 972.40698 m
23.852694 972.40698 l
36.718094 986.47748 l
30.732693 992.5979 l
18.330093 992.5979 l
18.330994 985.86322 18.330093 979.13818 18.330093 972.40698 c
h
16.355493 973.63739 m
16.355493 979.47382 l
9.999993 979.47382 l
16.355493 973.63739 l
h
19.718494 994.617 m
58.345493 994.617 l
47.577995 1024.05164 l
19.718494 994.617 l
h
58.808296 999.15985 m
58.808296 1040.36218 l
46.220497 1033.48474 l
50.417698 1022.04175 54.609097 1010.60571 58.808296 999.15997 c
58.808296 999.15985 l
h
W
[80.000002 0 0 76.000062 9.999994 964.362086] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.047 mul 0.937 add
1 index 1 exp 0.435 mul 0.255 add
2 index 1 exp 0.039 mul 0.212 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
q
[70.34211 0 0 70.327225 2234.0022 639.76587] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
9.940001 20 m
7.420001 20 l
7.420001 15.1 l
7.420001 14.020001 6.56 13.18 5.480001 13.18 c
4.440001 13.18 3.54 14.04 3.54 15.1 c
3.54 20 l
1.04 20 l
1.04 10.84 l
3.54 10.84 l
3.54 11.5 l
4.16 10.88 4.820001 10.66 5.480001 10.66 c
6.68 10.66 7.8 11.12 8.64 11.94 c
9.480001 12.799999 9.940001 13.92 9.940001 15.099999 c
9.940001 20 l
h
15.020001 20 m
12.42 20 l
12.42 10.84 l
15.020001 10.84 l
15.020001 20 l
h
13.72 9.74 m
12.860001 9.74 12.16 9.04 12.16 8.2 c
12.16 7.78 12.32 7.4 12.62 7.12 c
12.92 6.82 13.3 6.66 13.72 6.66 c
14.56 6.66 15.26 7.36 15.26 8.2 c
15.26 9.04 14.56 9.74 13.72 9.74 c
h
28.299999 20 m
25.119999 20 l
22.66 17.040001 l
20.219999 20 l
17.019999 20 l
21.119999 15.18 l
17.419998 10.84 l
20.619999 10.84 l
22.66 13.3 l
24.700001 10.84 l
27.880001 10.84 l
24.220001 15.18 l
28.299999 20 l
h
33.619999 20.219999 m
32.379997 20.219999 31.16 19.719999 30.219999 18.82 c
29.32 17.879999 28.82 16.66 28.82 15.42 c
28.82 14.16 29.32 12.940001 30.219999 12.020001 c
31.139999 11.14 32.34 10.64 33.619999 10.64 c
34.939999 10.64 36.139999 11.14 37 12.020001 c
37.919998 12.940001 38.419998 14.14 38.419998 15.42 c
38.419998 16.700001 37.919998 17.9 37 18.82 c
36.099998 19.719999 34.900002 20.219999 33.619999 20.219999 c
h
33.619999 12.92 m
32.279999 12.92 31.179998 14.04 31.179998 15.42 c
31.179998 16.799999 32.279999 17.92 33.619999 17.92 c
34.98 17.92 36.079998 16.799999 36.079998 15.42 c
36.079998 14.040001 34.98 12.92 33.619999 12.92 c
h
49.060001 20 m
46.540001 20 l
46.540001 15.1 l
46.540001 14.020001 45.68 13.18 44.600002 13.18 c
43.560001 13.18 42.660004 14.04 42.660004 15.1 c
42.660004 20 l
40.160004 20 l
40.160004 10.84 l
42.660004 10.84 l
42.660004 11.5 l
43.280003 10.88 43.940002 10.66 44.600002 10.66 c
45.800003 10.66 46.920002 11.12 47.760002 11.94 c
48.600002 12.799999 49.060001 13.92 49.060001 15.099999 c
49.060001 20 l
h
57.32 20 m
54.919998 20 l
54.039997 20 53.219997 19.66 52.619999 19.059999 c
52 18.439999 51.68 17.639999 51.68 16.76 c
51.68 12.96 l
50.400002 12.96 l
50.400002 10.9 l
51.68 10.9 l
51.68 7.3 l
54.060001 7.3 l
54.060001 10.9 l
56.720001 10.9 l
56.720001 12.959999 l
54.060001 12.959999 l
54.060001 16.719999 l
54.060001 17.219999 54.5 17.68 54.940002 17.68 c
56.680004 17.68 l
57.32 20 l
h
61.540001 20 m
59.02 20 l
59.02 10.84 l
61.540001 10.84 l
61.540001 11.58 l
62.260002 10.86 63.34 10.62 64.059998 10.62 c
64.659996 10.62 l
64.059998 13.12 l
63.679996 13.12 l
62.499996 13.12 61.539997 14.04 61.539997 15.139999 c
61.539997 20 l
61.540001 20 l
h
70.080002 20.18 m
68.82 20.18 67.620003 19.700001 66.700005 18.800001 c
65.800003 17.880001 65.300003 16.68 65.300003 15.420001 c
65.300003 14.160002 65.800003 12.960001 66.700005 12.040001 c
67.600006 11.140001 68.800003 10.660001 70.080002 10.660001 c
70.919998 10.660001 71.68 10.960001 72.340004 11.56 c
72.440002 11.64 l
72.440002 10.84 l
74.860001 10.84 l
74.860001 20 l
72.440002 20 l
72.440002 19.280001 l
72.340004 19.380001 l
71.620003 20.080002 70.800003 20.18 70.080002 20.18 c
h
70.080002 13 m
68.800003 13 67.720001 14.12 67.720001 15.42 c
67.720001 16.74 68.800003 17.84 70.080002 17.84 c
71.360001 17.84 72.440002 16.74 72.440002 15.42 c
72.440002 14.12 71.360001 13 70.080002 13 c
h
81.400002 20.18 m
80.139999 20.18 78.940002 19.700001 78.020004 18.800001 c
77.120003 17.880001 76.620003 16.68 76.620003 15.420001 c
76.620003 14.160002 77.120003 12.960001 78.020004 12.040001 c
78.920006 11.140001 80.120003 10.660001 81.400002 10.660001 c
82.239998 10.660001 83 10.960001 83.660004 11.56 c
83.760002 11.64 l
83.760002 5.32 l
86.18 5.32 l
86.18 20 l
83.760002 20 l
83.760002 19.280001 l
83.660004 19.380001 l
82.940002 20.080002 82.120003 20.18 81.400002 20.18 c
h
81.400002 13 m
80.120003 13 79.040001 14.12 79.040001 15.42 c
79.040001 16.74 80.120003 17.84 81.400002 17.84 c
82.68 17.84 83.760002 16.74 83.760002 15.42 c
83.760002 14.12 82.68 13 81.400002 13 c
h
92.379997 20.219999 m
92.360001 20.219999 l
91.779999 20.219999 91.18 20.08 90.620003 19.82 c
90.100006 19.6 89.620003 19.24 89.18 18.779999 c
88.480003 18.019999 88.059998 17.019999 87.959999 15.979999 c
87.940002 15.799998 87.919998 15.619999 87.919998 15.419998 c
87.919998 15.019999 87.979996 14.599999 88.080002 14.179998 c
88.260002 13.379998 88.639999 12.639998 89.18 12.079998 c
89.580002 11.639998 90.040001 11.299998 90.620003 11.019999 c
91.160004 10.759998 91.760002 10.639998 92.380005 10.639998 c
93.020004 10.639998 93.600006 10.759998 94.140007 11.019999 c
94.740005 11.299998 95.220009 11.659999 95.580009 12.079998 c
96.100006 12.639998 96.500008 13.359998 96.700012 14.179998 c
96.800011 14.559999 96.840012 14.959998 96.840012 15.419998 c
96.840012 15.879998 l
90.12001 15.879998 l
90.140007 16.019999 l
90.400009 17.259998 91.340004 18.159998 92.380005 18.159998 c
92.400002 18.159998 l
92.980003 18.119997 93.620003 17.759998 94 17.439999 c
94.220001 17.259998 l
95.880005 18.699999 l
95.580002 18.959999 l
95.360001 19.16 95.080002 19.4 94.779999 19.559999 c
94.760002 19.559999 l
94.040001 19.98 93.260002 20.199999 92.380005 20.219999 c
92.379997 20.219999 l
h
92.379997 12.72 m
91.599998 12.72 90.82 13.26 90.399994 14.1 c
90.319992 14.26 l
94.459991 14.26 l
94.37999 14.1 l
93.919991 13.240001 93.159988 12.72 92.37999 12.72 c
92.379997 12.72 l
h
101.739998 20.08 m
101.459999 20.08 101.159996 20.039999 100.799995 19.98 c
99.799995 19.779999 98.859993 19.34 98.119995 18.68 c
97.819992 18.440001 l
99.319992 16.780001 l
99.599991 17.040001 l
100.479988 17.780001 101.199989 17.92 101.659988 17.92 c
101.999985 17.92 102.23999 17.879999 102.479988 17.76 c
102.779991 17.639999 102.919991 17.440001 102.919991 17.16 c
102.919991 16.92 102.779991 16.619999 101.599991 16.42 c
100.519989 16.200001 99.839989 15.980001 99.519989 15.8 c
99.099991 15.56 98.759987 15.24 98.519989 14.84 c
98.279991 14.440001 98.159988 14 98.159988 13.5 c
98.159988 12.98 98.319992 12.48 98.639992 12.020001 c
98.899994 11.64 99.279991 11.34 99.839989 11.06 c
100.299988 10.84 100.819992 10.740001 101.439987 10.740001 c
101.659988 10.740001 101.87999 10.760001 102.079987 10.780001 c
102.959984 10.920001 103.839989 11.300001 104.55999 11.860001 c
104.859993 12.1 l
103.439995 13.740001 l
103.159996 13.520001 l
102.459999 12.96 101.859993 12.860001 101.499992 12.860001 c
101.23999 12.860001 100.999992 12.900001 100.779991 13.000001 c
100.519989 13.140001 100.37999 13.360001 100.37999 13.500001 c
100.37999 13.780001 100.579987 13.980001 101.619987 14.220001 c
102.979988 14.540001 103.419991 14.700001 103.699989 14.820002 c
104.259987 15.140001 104.499992 15.400002 104.699989 15.660002 c
104.999992 16.080002 105.139992 16.600002 105.139992 17.160002 c
105.139992 17.740002 104.979988 18.260002 104.679993 18.680002 c
104.379997 19.100002 103.979996 19.460003 103.399994 19.740002 c
102.939995 19.960001 102.339996 20.080002 101.73999 20.080002 c
101.739998 20.08 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
