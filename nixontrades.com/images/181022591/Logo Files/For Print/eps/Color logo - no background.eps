%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2465 728
%%HiResBoundingBox: 0 0 2464.0798 727.91998
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2464.0798 727.91998 re
W
q
[0.24 0 0 -0.24 0 727.91998] cm
q
0 0 10266.666 3030.6348 re
W*
q
[44.637207 0 0 44.623829 446.4259 580.1098] cm
/DeviceRGB {} CS
[0.2235 0.2431 0.2745] SC
/DeviceRGB {} cs
[0.2235 0.2431 0.2745] sc
0 39.944443 16 2 re
f
194 39.944443 16 2 re
f
Q
q
[83.262848 0 0 83.237892 523.06927 40.03738] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
3.88 5.84 m
12.08 17.6 l
12.12 17.6 l
12.12 5.84 l
13.8 5.84 l
13.8 20 l
11.68 20 l
3.480001 8.24 l
3.440001 8.24 l
3.440001 20 l
1.760001 20 l
1.760001 5.84 l
3.88 5.84 l
3.88 5.84 l
h
17.959999 5.84 m
18.266665 5.84 18.533331 5.95 18.759998 6.17 c
18.986666 6.39 19.099998 6.66 19.099998 6.98 c
19.099998 7.313334 18.993332 7.586667 18.779999 7.8 c
18.566666 8.013334 18.293333 8.120001 17.959999 8.12 c
17.626665 8.119999 17.353333 8.013332 17.139999 7.8 c
16.926666 7.586667 16.82 7.313334 16.82 6.98 c
16.82 6.659999 16.933332 6.389999 17.16 6.17 c
17.386667 5.95 17.653334 5.84 17.959999 5.84 c
17.959999 5.84 l
h
18.74 10.64 m
18.74 20 l
17.18 20 l
17.18 10.64 l
18.74 10.64 l
h
22.940001 10.64 m
25.42 14 l
27.76 10.639999 l
29.66 10.639999 l
26.440001 14.959999 l
30.300001 20 l
28.240002 20 l
25.280003 15.96 l
22.360003 20 l
20.420002 20 l
24.260002 14.96 l
20.900002 10.639999 l
22.940002 10.639999 l
22.940001 10.64 l
h
36.299999 10.4 m
37.753334 10.4 38.939999 10.849999 39.860001 11.75 c
40.780003 12.650001 41.260002 13.84 41.299999 15.32 c
41.299999 16.746666 40.833332 17.916666 39.899998 18.83 c
38.966663 19.743334 37.766663 20.213333 36.299999 20.24 c
34.833332 20.24 33.639999 19.776667 32.720001 18.85 c
31.800003 17.923334 31.32667 16.746668 31.300001 15.320001 c
31.300001 13.880001 31.766668 12.703334 32.700001 11.790001 c
33.633331 10.876668 34.833332 10.413334 36.299999 10.400001 c
36.299999 10.4 l
h
32.98 15.32 m
32.98 16.346666 33.290001 17.176666 33.91 17.809999 c
34.529999 18.443333 35.326668 18.773333 36.299999 18.799999 c
37.273331 18.799999 38.066666 18.476665 38.68 17.83 c
39.293335 17.183334 39.606667 16.346666 39.619999 15.32 c
39.619999 14.306666 39.309998 13.473332 38.689999 12.82 c
38.07 12.166667 37.266666 11.84 36.279999 11.84 c
35.32 11.84 34.533333 12.163334 33.919998 12.81 c
33.306664 13.456667 32.993332 14.293334 32.98 15.320001 c
32.98 15.32 l
h
48.32 10.4 m
49.493332 10.4 50.379997 10.74 50.98 11.42 c
51.580002 12.1 51.880001 13.006667 51.880001 14.14 c
51.880001 20 l
50.32 20 l
50.32 14.32 l
50.32 13.599999 50.153332 13.009999 49.82 12.549999 c
49.486668 12.089999 48.939999 11.853333 48.18 11.839999 c
47.220001 11.839999 46.49667 12.156666 46.010002 12.789999 c
45.523335 13.423332 45.280003 14.299999 45.280003 15.419999 c
45.280003 20 l
43.720001 20 l
43.720001 12.719999 l
43.720001 12.653333 43.693333 11.959999 43.639999 10.639999 c
45.119999 10.639999 l
45.146667 11.573333 45.16 12.086666 45.16 12.179999 c
45.200001 12.179999 l
45.453335 11.646666 45.863335 11.216666 46.43 10.889999 c
46.996666 10.563333 47.626667 10.4 48.32 10.4 c
h
57.200001 7.98 m
57.200001 10.64 l
59.959999 10.64 l
59.959999 11.96 l
57.200001 11.96 l
57.200001 16.959999 l
57.200001 17.706667 57.32 18.199999 57.560001 18.439999 c
57.800003 18.679998 58.146667 18.799997 58.600002 18.799999 c
59.120003 18.799999 59.580002 18.693333 59.980003 18.48 c
60.040005 19.9 l
59.506672 20.126667 58.900005 20.24 58.220005 20.24 c
57.260006 20.24 56.590008 20.003334 56.210007 19.530001 c
55.830006 19.056667 55.640007 18.280001 55.640007 17.200001 c
55.640007 11.960001 l
53.600006 11.960001 l
53.600006 10.640001 l
55.640007 10.640001 l
55.640007 7.980001 l
57.200008 7.980001 l
57.200001 7.98 l
h
66.480003 10.4 m
66.720001 10.4 66.933334 10.433333 67.120003 10.5 c
67.020004 12.08 l
66.726669 12 66.446671 11.96 66.180008 11.96 c
65.273338 11.96 64.590004 12.256667 64.130005 12.85 c
63.670002 13.443334 63.440002 14.280001 63.440006 15.360001 c
63.440006 20 l
61.880005 20 l
61.880005 12.719999 l
61.880005 12.533333 61.853336 11.839999 61.800003 10.639999 c
63.280003 10.639999 l
63.306671 11.573333 63.320004 12.086666 63.320004 12.179999 c
63.360004 12.179999 l
63.613338 11.646666 64.023338 11.216666 64.590004 10.889999 c
65.15667 10.563333 65.786667 10.4 66.480003 10.4 c
h
72.519997 10.4 m
73.879997 10.4 74.869995 10.719999 75.489998 11.36 c
76.110001 12 76.426666 12.966666 76.439995 14.26 c
76.439995 18.459999 l
76.439995 18.859999 76.486664 19.373333 76.579994 20 c
75.079994 20 l
75.013329 19.879999 74.979996 19.413334 74.979996 18.6 c
74.939995 18.6 l
74.23333 19.666668 73.206665 20.213333 71.859993 20.24 c
70.833328 20.24 69.996658 19.983334 69.349991 19.469999 c
68.703323 18.956665 68.37999 18.286665 68.37999 17.459999 c
68.37999 16.326666 68.846657 15.496666 69.779991 14.969999 c
70.713326 14.443333 72.173325 14.179999 74.159988 14.179999 c
74.87999 14.179999 l
74.87999 13.919999 l
74.87999 12.56 74.106659 11.866666 72.55999 11.839999 c
71.439987 11.839999 70.513321 12.179999 69.779991 12.859999 c
68.799988 11.839998 l
69.759987 10.906665 70.999992 10.426665 72.519989 10.399998 c
72.519997 10.4 l
h
70.059998 17.299999 m
70.059998 18.353333 70.746666 18.893333 72.119995 18.92 c
72.933327 18.92 73.596664 18.66 74.109993 18.139999 c
74.623322 17.619999 74.87999 16.859999 74.87999 15.86 c
74.87999 15.5 l
73.159988 15.5 l
72.23999 15.5 71.496658 15.646667 70.929985 15.94 c
70.363312 16.233334 70.073311 16.686666 70.059982 17.299999 c
70.059998 17.299999 l
h
88.639999 4.88 m
88.639999 20 l
87.080002 20 l
87.080002 18.34 l
87.040001 18.34 l
86.720001 18.940001 86.23333 19.406666 85.580002 19.74 c
84.926674 20.073334 84.213341 20.24 83.440002 20.24 c
82.120003 20.24 81.01667 19.77 80.130005 18.83 c
79.24334 17.889999 78.786674 16.719999 78.760002 15.32 c
78.760002 13.893333 79.216667 12.719999 80.130005 11.799999 c
81.043343 10.879999 82.226677 10.413333 83.680008 10.4 c
85.026672 10.4 86.146675 10.933333 87.040009 12 c
87.080009 12 l
87.080009 4.88 l
88.640007 4.88 l
88.639999 4.88 l
h
80.440002 15.32 m
80.440002 16.346666 80.75 17.18 81.370003 17.82 c
81.990005 18.459999 82.786667 18.786665 83.760002 18.799999 c
84.733337 18.799999 85.523338 18.48 86.130005 17.84 c
86.736671 17.200001 87.053337 16.360001 87.080002 15.32 c
87.080002 14.306666 86.770004 13.473332 86.150002 12.82 c
85.529999 12.166667 84.726669 11.84 83.739998 11.84 c
82.779999 11.84 81.996666 12.163334 81.389999 12.81 c
80.783333 13.456667 80.466667 14.293334 80.440002 15.320001 c
80.440002 15.32 l
h
95.779999 10.4 m
97.166664 10.4 98.25 10.836666 99.029999 11.709999 c
99.809998 12.583332 100.206665 13.819999 100.220001 15.419999 c
100.220001 15.799999 l
92.660004 15.799999 l
92.740005 16.666666 93.066673 17.379999 93.640007 17.939999 c
94.213341 18.499998 94.913338 18.786665 95.740005 18.799999 c
97.006676 18.799999 97.99334 18.326666 98.700005 17.379999 c
99.880005 18.299999 l
99.386673 18.939999 98.806671 19.423332 98.140007 19.75 c
97.473343 20.076668 96.67334 20.240002 95.740005 20.24 c
94.313339 20.24 93.166672 19.776667 92.300003 18.85 c
91.433334 17.923334 90.993332 16.746668 90.980003 15.320001 c
90.980003 13.906668 91.42334 12.740001 92.310005 11.820001 c
93.196671 10.900001 94.35334 10.426667 95.780006 10.400001 c
95.779999 10.4 l
h
98.540001 14.48 m
98.5 13.666666 98.236671 13.023333 97.75 12.549999 c
97.263329 12.076666 96.579994 11.839999 95.699997 11.839999 c
94.900002 11.839999 94.226669 12.066666 93.68 12.52 c
93.133331 12.973333 92.793335 13.626666 92.660004 14.48 c
98.540001 14.48 l
h
105.5 10.4 m
106.993332 10.413333 108.053329 10.98 108.68 12.099999 c
107.379997 12.959999 l
106.926666 12.213332 106.266663 11.839999 105.399994 11.839999 c
104.879997 11.839999 104.443329 11.959999 104.089996 12.199999 c
103.736664 12.439999 103.559998 12.753332 103.559998 13.139999 c
103.559998 13.766666 104.339996 14.219999 105.899994 14.499999 c
107.019997 14.699999 107.813324 15.026666 108.279991 15.48 c
108.746658 15.933333 108.979988 16.539999 108.979988 17.299999 c
108.979988 18.219999 108.639992 18.939999 107.959991 19.459999 c
107.279991 19.98 106.373329 20.24 105.23999 20.24 c
104.359993 20.24 103.636658 20.1 103.069992 19.82 c
102.503326 19.539999 102.013329 19.1 101.599991 18.5 c
102.839989 17.540001 l
103.226654 18.006668 103.606659 18.333334 103.979988 18.52 c
104.353317 18.706667 104.773323 18.799999 105.23999 18.800001 c
105.839989 18.800001 106.333328 18.670002 106.719994 18.410002 c
107.106659 18.150002 107.299995 17.800003 107.299995 17.360003 c
107.299995 16.90667 107.096664 16.566669 106.689995 16.340002 c
106.283325 16.113335 105.606659 15.906669 104.659996 15.720002 c
103.726662 15.520002 103.049995 15.220002 102.629997 14.820003 c
102.209999 14.420003 102 13.86667 102 13.160003 c
102 12.373336 102.323334 11.720002 102.970001 11.200003 c
103.616669 10.680003 104.459999 10.413336 105.5 10.400003 c
105.5 10.4 l
h
f
Q
q
[26.707924 0 0 26.699917 1365.64587 2044.5242] cm
/DeviceRGB {} CS
[0.9922 0.4392 0.0784] SC
/DeviceRGB {} cs
[0.9922 0.4392 0.0784] sc
8.14 18.459999 m
9.92 18.459999 11.58 17.639999 12.68 16.199999 c
14.08 17.239998 l
12.66 19.139997 10.48 20.219997 8.139999 20.219997 c
4.02 20.219997 0.679999 16.879997 0.679999 12.759997 c
0.679999 8.659998 4.02 5.319997 8.139999 5.319997 c
10.5 5.319997 12.679999 6.419997 14.099999 8.319998 c
12.679999 9.359998 l
11.599999 7.899998 9.94 7.079998 8.139999 7.079998 c
4.98 7.079998 2.44 9.619998 2.44 12.759998 c
2.44 15.919998 4.98 18.459999 8.139999 18.459999 c
8.14 18.459999 l
h
37.216 5.32 m
41.315998 5.32 44.675999 8.66 44.675999 12.780001 c
44.675999 16.880001 41.315998 20.200001 37.216 20.200001 c
33.116001 20.200001 29.775999 16.880001 29.775999 12.780001 c
29.775999 8.660001 33.115997 5.320001 37.216 5.320001 c
37.216 5.32 l
h
37.216 18.440001 m
40.335999 18.440001 42.855999 15.880001 42.855999 12.780001 c
42.855999 9.660001 40.335999 7.080001 37.216 7.080001 c
34.096001 7.080001 31.576 9.660001 31.576 12.780001 c
31.576 15.880001 34.096001 18.440001 37.216 18.440001 c
h
61.112 20 m
61.112 5.76 l
66.071999 5.76 l
66.972 5.76 67.832001 6.12 68.472 6.76 c
69.112 7.4 69.472 8.26 69.472 9.16 c
69.472 11.04 67.931999 12.54 66.071999 12.54 c
62.891998 12.54 l
62.891998 20 l
61.112 20 l
h
66.071999 10.8 m
66.951996 10.8 67.671997 10.06 67.671997 9.16 c
67.671997 8.259999 66.951996 7.5 66.071999 7.5 c
62.891998 7.5 l
62.891998 10.8 l
66.071999 10.8 l
h
88.947998 20 m
88.947998 12.8 l
83.928001 5.76 l
86.127998 5.76 l
89.867996 10.98 l
93.607994 5.76 l
95.787994 5.76 l
90.767998 12.799999 l
90.767998 20 l
88.947998 20 l
h
114.664001 20 m
114.664001 7.52 l
110.903999 7.52 l
110.903999 5.76 l
120.223999 5.76 l
120.223999 7.52 l
116.463997 7.52 l
116.463997 20 l
114.663994 20 l
114.664001 20 l
h
142.080002 12.42 m
147.580002 20 l
145.520004 20 l
140.080002 12.520001 l
138.040009 12.520001 l
138.040009 20 l
136.320007 20 l
136.320007 5.76 l
141.26001 5.76 l
142.160004 5.76 143.000015 6.12 143.640015 6.76 c
144.280014 7.4 144.640015 8.24 144.640015 9.14 c
144.640015 10.72 143.540009 12.040001 142.080017 12.42 c
142.080002 12.42 l
h
138.039993 7.48 m
138.039993 10.8 l
141.259995 10.8 l
142.179993 10.8 142.919998 10.06 142.919998 9.14 c
142.919998 8.22 142.179993 7.480001 141.259995 7.480001 c
138.039993 7.480001 l
138.039993 7.48 l
h
173.09599 20 m
171.51599 15.860001 l
165.695984 15.860001 l
164.115982 20 l
162.195984 20 l
167.67598 5.76 l
169.53598 5.76 l
175.03598 20 l
173.09598 20 l
173.09599 20 l
h
170.81599 14.1 m
168.616 8.34 l
166.395996 14.1 l
170.81599 14.1 l
h
190.992 20 m
190.992 5.76 l
195.59201 5.76 l
199.632 5.76 202.91202 8.96 202.91202 12.88 c
202.91202 16.799999 199.63202 20 195.59201 20 c
190.992 20 l
h
195.592 18.26 m
198.65199 18.26 201.13199 15.82 201.13199 12.88 c
201.13199 9.940001 198.65199 7.5 195.592 7.5 c
192.77199 7.5 l
192.77199 18.26 l
195.592 18.26 l
h
220.048 20 m
220.048 5.76 l
221.84801 5.76 l
221.84801 20 l
220.048 20 l
h
249.32401 20 m
241.70401 8.74 l
241.70401 20 l
239.90401 20 l
239.90401 5.76 l
241.86401 5.76 l
249.46402 17.02 l
249.46402 5.76 l
251.26402 5.76 l
251.26402 20 l
249.32402 20 l
249.32401 20 l
h
275.54001 10.84 m
281.46002 10.84 l
281.46002 17.139999 l
280.04001 19.039999 277.80002 20.219999 275.44003 20.219999 c
271.34003 20.219999 268.00003 16.879999 268.00003 12.759999 c
268.00003 8.66 271.34003 5.319999 275.44003 5.319999 c
277.46002 5.319999 279.34003 6.119999 280.72003 7.52 c
279.40002 8.679999 l
278.36002 7.639999 276.94003 7.079999 275.44003 7.079999 c
272.30002 7.079999 269.76004 9.619999 269.76004 12.759999 c
269.76004 15.919999 272.30005 18.459999 275.44003 18.459999 c
277.10004 18.459999 278.62003 17.759998 279.72003 16.539999 c
279.72003 12.599999 l
275.54004 12.599999 l
275.54004 10.839998 l
275.54001 10.84 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
